import React, { useState, useEffect } from 'react';
import { Brain, Loader } from 'lucide-react';

const GPTSummary: React.FC = () => {
  const [summary, setSummary] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [typewriterIndex, setTypewriterIndex] = useState(0);

  const fullSummary = `Today you spent 6.5 hours in highly productive development work. Your primary focus was on implementing the FlashTime dashboard components, with significant time invested in the ProductivityScore and TimeChart modules.

Key achievements:
â€¢ Fixed critical authentication bug (45 min)
â€¢ Implemented cyberpunk UI components (3.2h)
â€¢ Added time tracking functionality (2.1h)
â€¢ Code review and optimization (0.7h)

Recommendations:
â€¢ Take more frequent breaks during long coding sessions
â€¢ Consider pair programming for complex debugging tasks
â€¢ Your productivity peak is between 10-11 AM - schedule important tasks then

Overall: Excellent focus and code quality today! ðŸ”¥`;

  const generateSummary = () => {
    setIsGenerating(true);
    setSummary('');
    setTypewriterIndex(0);
    
    setTimeout(() => {
      setIsGenerating(false);
      startTypewriter();
    }, 2000);
  };

  const startTypewriter = () => {
    const timer = setInterval(() => {
      setTypewriterIndex((prev) => {
        if (prev >= fullSummary.length) {
          clearInterval(timer);
          return prev;
        }
        setSummary(fullSummary.slice(0, prev + 1));
        return prev + 1;
      });
    }, 30);
  };

  useEffect(() => {
    // Auto-generate on mount
    setTimeout(() => {
      generateSummary();
    }, 2000);
  }, []);

  return (
    <div className="bg-terminal-dark/50 backdrop-blur-sm border border-cyber-purple/30 rounded-lg p-6 shadow-xl">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <Brain className="w-5 h-5 text-cyber-purple" />
          <h2 className="text-lg font-semibold text-cyber-green">AI Summary</h2>
        </div>
        
        <button
          onClick={generateSummary}
          disabled={isGenerating}
          className="px-3 py-1 text-xs bg-cyber-purple/20 hover:bg-cyber-purple/30 text-cyber-purple rounded-lg transition-all duration-200 disabled:opacity-50"
        >
          {isGenerating ? <Loader className="w-3 h-3 animate-spin" /> : 'Regenerate'}
        </button>
      </div>

      <div className="min-h-64 max-h-80 overflow-y-auto custom-scrollbar">
        {isGenerating ? (
          <div className="flex items-center justify-center h-32">
            <div className="flex items-center space-x-2">
              <Loader className="w-5 h-5 animate-spin text-cyber-purple" />
              <span className="text-sm text-cyber-purple">Analyzing your productivity...</span>
            </div>
          </div>
        ) : (
          <div className="prose prose-invert max-w-none">
            <pre className="whitespace-pre-wrap text-sm text-cyber-green/90 font-mono leading-relaxed">
{summary}
              {typewriterIndex < fullSummary.length && (
                <span className="animate-pulse text-cyber-blue">|</span>
              )}
            </pre>
          </div>
        )}
      </div>

      {!isGenerating && summary && (
        <div className="mt-4 pt-4 border-t border-cyber-purple/20">
          <div className="flex items-center justify-between text-xs text-cyber-green/60">
            <span>Generated by GPT-4</span>
            <span>Last updated: Just now</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default GPTSummary;